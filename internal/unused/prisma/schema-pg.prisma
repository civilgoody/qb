generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                String      @id @default(uuid())
  firstName         String
  lastName          String?
  email             String      @unique
  role              Role        @default(MEMBER)
  age               Int?
  image             String?
  username          String?     @unique @db.VarChar(18)
  departmentId      String?
  levelId           Int?
  semester          Int?
  isActive          Boolean     @default(true)
  password          String?
  phone             String?     @db.VarChar(32)
  twitter           String?     @db.VarChar(32)
  linkedIn          String?     @db.VarChar(32)
  discord           String?     @db.VarChar(32)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  uploadedQuestions Question[]
  department        Department? @relation(fields: [departmentId], references: [id])
  level             Level?      @relation(fields: [levelId], references: [id])
}

model Faculty {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  departments Department[]
}

model Department {
  id        String   @id @db.VarChar(8)
  title     String   @unique
  facultyId Int
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  users     User[]
  courses   Course[] @relation("CourseToDepartment")
}

model Level {
  id      Int      @id @default(autoincrement())
  courses Course[]
  users   User[]
}

model Session {
  id        String     @id @db.VarChar(16)
  startDate DateTime?
  endDate   DateTime?
  info      String?
  questions Question[]
}

model Question {
  id              String       @id
  courseId        String
  course          Course       @relation(fields: [courseId], references: [id])
  sessionId       String
  session         Session      @relation(fields: [sessionId], references: [id])
  imageLinks      String[]
  lecturer        String?
  timeAllowed     Int?
  backupImageLink String?
  docLink         String?
  tips            String?
  type            QuestionType
  downloads       Int?
  views           Int?
  approved        Boolean      @default(false)
  uploaderId      String?
  uploader        User?        @relation(fields: [uploaderId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Course {
  id          String        @id
  units       Int
  title       String
  levelId     Int
  semester    Int
  description String?
  status      CourseStatus?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  level       Level         @relation(fields: [levelId], references: [id])
  questions   Question[]
  departments Department[]  @relation("CourseToDepartment")
}

enum Role {
  ADMIN
  MEMBER
}

enum QuestionType {
  TEST
  EXAM
}

enum CourseStatus {
  ELECTIVE
  COMPULSORY
}
