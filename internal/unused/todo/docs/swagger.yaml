basePath: /api/v1
definitions:
  models.CreateTodoInput:
    properties:
      completed:
        type: boolean
      description:
        example: Research destinations and activities
        maxLength: 500
        type: string
      title:
        example: Plan weekend trip
        maxLength: 100
        minLength: 3
        type: string
    required:
    - title
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: A descriptive error message
        type: string
    type: object
  models.Todo:
    properties:
      completed:
        example: false
        type: boolean
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      deleted_at:
        description: Simplified for Swagger parsing
        example: "null"
        type: string
      description:
        example: Milk, eggs, bread and cheese
        maxLength: 500
        type: string
      id:
        description: |-
          gorm.Model includes ID, CreatedAt, UpdatedAt, DeletedAt (soft delete).
          We'll define our own ID to match the string type requirement,
          but keeping the other GORM fields for convenience.
        example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        type: string
      title:
        example: Buy groceries
        maxLength: 100
        minLength: 3
        type: string
      updated_at:
        example: "2023-01-01T12:30:00Z"
        type: string
    required:
    - title
    type: object
  models.UpdateTodoInput:
    properties:
      completed:
        type: boolean
      description:
        example: Confirm dates and prices
        maxLength: 500
        type: string
      title:
        example: Book flight tickets
        maxLength: 100
        minLength: 3
        type: string
    type: object
  models.ValidationErrorResponse:
    properties:
      validation_errors:
        additionalProperties:
          type: string
        description: Map of field names to error messages
        type: object
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a simple To-Do list API built with Go, Gin, and GORM.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go To-Do API
  version: "1.0"
paths:
  /todos:
    get:
      description: Retrieve a list of all To-Do items from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all To-Dos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new To-Do item in the database.
      parameters:
      - description: To-Do object to be created
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.CreateTodoInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: 'Bad Request: Validation Errors'
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new To-Do
      tags:
      - todos
  /todos/{id}:
    delete:
      description: Delete a To-Do item from the database using its ID.
      parameters:
      - description: To-Do ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a To-Do
      tags:
      - todos
    get:
      description: Retrieve a single To-Do item from the database using its ID.
      parameters:
      - description: To-Do ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get To-Do by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update an existing To-Do item in the database.
      parameters:
      - description: To-Do ID
        in: path
        name: id
        required: true
        type: string
      - description: To-Do object with updated fields
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTodoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: 'Bad Request: Validation Errors'
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a To-Do
      tags:
      - todos
swagger: "2.0"
